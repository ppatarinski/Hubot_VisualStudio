// Generated by CoffeeScript 1.7.1
(function() {
  var Creator, Fs, Path;

  Fs = require('fs');

  Path = require('path');

  Creator = (function() {
    function Creator(path) {
      this.path = path;
      this.templateDir = "" + __dirname + "/templates";
      this.scriptsDir = "" + __dirname + "/scripts";
    }

    Creator.prototype.mkdir = function(path) {
      return Fs.exists(path, function(exists) {
        if (!exists) {
          return Fs.mkdirSync(path, 0x1ed);
        }
      });
    };

    Creator.prototype.copy = function(from, to, callback) {
      return Fs.readFile(from, "utf8", function(err, data) {
        console.log("Copying " + (Path.resolve(from)) + " -> " + (Path.resolve(to)));
        Fs.writeFileSync(to, data, "utf8");
        if (callback != null) {
          return callback(err, to);
        }
      });
    };

    Creator.prototype.rename = function(from, to, callback) {
      return Fs.rename(from, to, function(err, data) {
        console.log("Renaming " + (Path.resolve(from)) + " -> " + (Path.resolve(to)));
        if (callback != null) {
          return callback(err, to);
        }
      });
    };

    Creator.prototype.copyDefaultScripts = function(path) {
      var file, _i, _len, _ref, _results;
      _ref = Fs.readdirSync(this.scriptsDir);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push(this.copy("" + this.scriptsDir + "/" + file, "" + path + "/" + file));
      }
      return _results;
    };

    Creator.prototype.run = function() {
      var bin, bins, file, files, _i, _j, _len, _len1, _results;
      console.log("Creating a hubot install at " + this.path);
      this.mkdir(this.path);
      this.mkdir("" + this.path + "/bin");
      this.mkdir("" + this.path + "/scripts");
      this.copyDefaultScripts("" + this.path + "/scripts");
      files = ["Procfile", "package.json", "README.md", "gitignore", "hubot-scripts.json", "external-scripts.json"];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        this.copy("" + this.templateDir + "/" + file, "" + this.path + "/" + file, (function(_this) {
          return function(err, to) {
            if (to === ("" + _this.path + "/gitignore")) {
              return _this.rename("" + _this.path + "/gitignore", "" + _this.path + "/.gitignore");
            }
          };
        })(this));
      }
      bins = ["bin/hubot", "bin/hubot.cmd"];
      _results = [];
      for (_j = 0, _len1 = bins.length; _j < _len1; _j++) {
        bin = bins[_j];
        _results.push(this.copy("" + this.templateDir + "/" + bin, "" + this.path + "/" + bin, (function(_this) {
          return function(err, binPath) {
            return Fs.chmodSync(binPath, 0x1ed);
          };
        })(this)));
      }
      return _results;
    };

    return Creator;

  })();

  module.exports = Creator;

}).call(this);

//# sourceMappingURL=creator.map
